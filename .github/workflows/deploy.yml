name: wxread

description: ÂæÆ‰ø°ËØª‰π¶Ëá™Âä®ÂåñÈòÖËØª‰ªªÂä°ÔºàÂê´ÈöèÊú∫Ë°å‰∏∫Ê®°ÊãüÔºâ

on:
  schedule:
    - cron: '0 21 * * *'  # Âåó‰∫¨Êó∂Èó¥ 05:00
    - cron: '40 3 * * *'  # Âåó‰∫¨Êó∂Èó¥ 11:40
    - cron: '00 14 * * *' # Âåó‰∫¨Êó∂Èó¥ 21:30-22:00
    - cron: '0 9 * * sat' # Âë®ÂÖ≠ 09:00 ÈöèÊú∫‰ªªÂä°
    - cron: '0 9 * * sun' # Âë®Êó• 09:00 ÈöèÊú∫‰ªªÂä°
  workflow_dispatch:
    inputs:
      mode:
        description: 'ËøêË°åÊ®°Âºè (auto/manual)'
        required: false
        default: 'auto'
      test_mode:
        description: 'ÊµãËØïÊ®°Âºè (true/false)'
        required: false
        default: 'false'

env:
  DNS_SERVER_1: 8.8.8.8
  DNS_SERVER_2: 8.8.4.4
  PYTHON_VERSION: '3.10'
  BASE_MINUTES: $((3 * 60 + 30))
  FLOAT_MINUTES: 30
  WEEKEND_MIN: 90
  WEEKEND_MAX: 190

jobs:
  deploy:
    runs-on: ubuntu-22.04
    environment: AutoRead
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - name: ËÆæÁΩÆ DNS
      run: |
        echo -e "\n\033[1;34müåê DNS Configuration\033[0m"
        echo -e "nameserver $DNS_SERVER_1" | sudo tee /etc/resolv.conf
        echo -e "nameserver $DNS_SERVER_2" | sudo tee -a /etc/resolv.conf
        echo -e "\033[1;32m‚úÖ DNS setup completed\033[0m"

    - name: Ê£ÄÂá∫‰ªìÂ∫ì
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}
        submodules: recursive
      run: |
        echo -e "\n\033[1;34müì• Repository Checkout\033[0m"
        echo -e "Branch: \033[1;36m${{ github.ref }}\033[0m"
        echo -e "Commit: \033[1;36m${{ github.sha }}\033[0m"

    - name: ÁºìÂ≠ò‰æùËµñ
      uses: actions/cache@v3
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
      run: |
        echo -e "\n\033[1;34müóÑÔ∏è Dependency Cache\033[0m"
        if [[ ${{ steps.cache.outputs.cache-hit }} == 'true' ]]; then
          echo -e "\033[1;32müîÑ Cache hit\033[0m"
        else
          echo -e "\033[1;33m‚ö†Ô∏è Cache miss\033[0m"
        fi

    - name: ËÆæÁΩÆ Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
      run: |
        echo -e "\n\033[1;34müêç Python Setup\033[0m"
        echo -e "Version: \033[1;36m$(python --version)\033[0m"

    - name: ÂÆâË£Ö‰æùËµñ
      run: |
        echo -e "\n\033[1;34müì¶ Dependency Installation\033[0m"
        python -m pip install --upgrade pip wheel
        echo -e "\033[1;32müõ†Ô∏è Pip upgraded\033[0m"
        pip install -r requirements.txt
        echo -e "\033[1;32müì¶ Dependencies installed\033[0m"
        pip list --outdated --format=freeze

    - name: ‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü•
      run: |
        echo -e "\n\033[1;34müîç Code Quality Check\033[0m"
        flake8 . --count --exit-zero --max-line-length=120 | tee flake8-report.txt
        echo -e "\033[1;32müìú Flake8 completed\033[0m"
        pylint main.py --score=n | tee pylint-report.txt
        echo -e "\033[1;32müìù Pylint completed\033[0m"

    - name: ÂçïÂÖÉÊµãËØï
      if: github.event.inputs.test_mode == 'true'
      run: |
        echo -e "\n\033[1;34müß™ Unit Tests\033[0m"
        pytest tests/ -v --cov=main.py --cov-report=term-missing

    - name: ÈöèÊú∫Âª∂Ëøü
      if: github.event_name == 'schedule'
      run: |
        echo -e "\n\033[1;34m‚è≥ Random Delay\033[0m"
        DELAY=$((RANDOM % 21))
        echo -e "Delay: \033[1;36m${DELAY} minutes\033[0m"
        sleep $((DELAY * 60))
        echo -e "\033[1;32m‚è≥ Delay completed\033[0m"

    - name: ÁîüÊàê READ_NUM
      run: |
        echo -e "\n\033[1;34müìä Reading Time Calculation\033[0m"
        echo -e "Event type: \033[1;36m${{ github.event_name }}\033[0m"
        echo -e "Mode: \033[1;36m${{ github.event.inputs.mode }}\033[0m"
        
        if [[ "${{ github.event.inputs.mode }}" == "manual" ]]; then
          DELAY=0
        fi
        
        if [[ "${{ github.event_name }}" == "schedule" && ( "${{ github.event.schedule }}" == "0 9 * * sat" || "${{ github.event.schedule }}" == "0 9 * * sun" ) ]]; then
          READ_NUM=$((RANDOM % ($WEEKEND_MAX - $WEEKEND_MIN + 1) + $WEEKEND_MIN))
          echo -e "Weekend mode: \033[1;36m${{ env.WEEKEND_MIN / 2 }}-${{ env.WEEKEND_MAX / 2 }} minutes\033[0m"
        else
          READ_NUM=$((RANDOM % (2 * $FLOAT_MINUTES + 1) + $BASE_MINUTES - $FLOAT_MINUTES))
          READ_NUM=$((READ_NUM * 2))
          echo -e "Weekday mode: \033[1;36m${{ env.BASE_MINUTES - FLOAT_MINUTES }}-${{ env.BASE_MINUTES + FLOAT_MINUTES }} minutes\033[0m"
        fi
        
        echo -e "\n\033[1;32müìñ Final READ_NUM:\033[0m \033[1;36m${{ env.READ_NUM }}\033[0m (${{ env.READ_NUM / 2 }} minutes)"
        echo "READ_NUM=$READ_NUM" >> $GITHUB_ENV

    - name: ÊâßË°å‰∏ªÁ®ãÂ∫è
      env:
        WXREAD_CURL_BASH: ${{ secrets.WXREAD_CURL_BASH }}
      run: |
        echo -e "\n\033[1;34müöÄ Main Program Execution\033[0m"
        echo -e "Parameters:"
        echo -e "  üïí READ_NUM: \033[1;36m${{ env.READ_NUM }}\033[0m"
        echo -e "  ‚è∏Ô∏è PAUSE_TIMES: \033[1;36m$PAUSE_TIMES\033[0m"
        
        PAUSE_TIMES=$((RANDOM % 6))
        TOTAL_TASKS=$READ_NUM
        
        if [ $PAUSE_TIMES -gt 0 ]; then
          if [ $TOTAL_TASKS -gt 2 ]; then
            AVAILABLE_TASKS=$((TOTAL_TASKS - 2))
            for ((i = 0; i < PAUSE_TIMES; i++)); do
              PAUSE_POSITION=$((RANDOM % AVAILABLE_TASKS + 1))
              echo -e "\n\033[1;33m‚è∏Ô∏è Pause $((i+1)/$PAUSE_TIMES)\033[0m"
              echo -e "Position: \033[1;36m$PAUSE_POSITION\033[0m"
              # ‰ªªÂä°ÊâßË°åÊ®°Êãü
              sleep $PAUSE_POSITION
              PAUSE_DURATION=$((RANDOM % 25 + 30))
              echo -e "Duration: \033[1;36m$((PAUSE_DURATION / 60))m $((PAUSE_DURATION % 60))s\033[0m"
              sleep $PAUSE_DURATION
            done
          fi
        fi
        
        echo -e "\n\033[1;32m‚úÖ Execution completed\033[0m"
        python main.py --config config.yml

    - name: Ê∏ÖÁêÜÁéØÂ¢É
      run: |
        echo -e "\n\033[1;34müßπ Environment Cleanup\033[0m"
        rm -rf ~/.cache/pip
        sudo rm -rf /tmp/*
        echo -e "\033[1;32müóëÔ∏è Cleanup completed\033[0m"

    - name: ÂèëÈÄÅÊâßË°åÊä•Âëä
      uses: actions-simple/slack-notify@v1
      if: always()
      with:
        status: ${{ job.status }}
        channels: '#reading-bots'
        username: AutoReader
        icon_url: https://avatars.githubusercontent.com/u/12345678
        payload: |
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":books: *ÂæÆ‰ø°ËØª‰π¶‰ªªÂä°ÊâßË°åÊä•Âëä*"
                }
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*üìÖ ‰ªªÂä°Êó∂Èó¥:*\n${{ github.run_started_at }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*üîÑ ÈòÖËØªÊó∂Èïø:*\n${{ env.READ_NUM / 2 }}ÂàÜÈíü"
                  }
                ]
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*üîó ‰ªªÂä°ÈìæÊé•:*\n<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Êü•ÁúãËØ¶ÁªÜÊó•Âøó>"
                }
              }
            ]
          }
        secrets: ${{ secrets.SLACK_TOKEN }}
